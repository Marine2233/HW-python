#n = 852
#res = 0
# Введите ваше решение ниже

# n = int(input("Введите число :"))

#while n > 99 and n < 1000 :
#   digit = n % 10
#   res += digit
#   n = n // 10

#print(digit)

#Петя, Катя и Сережа делают из бумаги журавликов. Вместе они сделали n журавликов.

#Сколько журавликов сделал каждый ребенок, если известно, что Петя и Сережа сделали одинаковое количество
# журавликов, а Катя сделала в два раза больше журавликов, чем Петя и Сережа вместе?

#Выведите кортеж из количества журавликов, сделанных Петей, Катей и Сережей.

#n = 385916

# Введите ваше решение ниже
#а1 = n // 100000
#a3 = (n // 1000) % 10
#a4 = (n // 100) % 10
#a5 = (n // 10) % 10
#a6 = n % 10

#sum = a1 + a2 + a3
#sum1 = a4 + a5 + a6

#if sum == sum1 :

#print(" Счастливое")

#else :
#print("Не счастливое")

#: На столе лежат n монеток. Некоторые из них лежат вверх решкой, а некоторые – гербом. 
#Определите минимальное число монеток, которые нужно перевернуть, 
#чтобы все монетки были повернуты вверх одной и той же стороной.
#Выведите минимальное количество монет, которые нужно переве
# import random
# n_coin = int(input("Введите кол-во монет :"))

# eagle=0
# tails=0

# for i in range(n_coin):
#     coin = random.randint(0,1)
#     print(coin ,end=' ')
#     if coin==0:
#         eagle +=1
#     else:
#         tails +=1

# if eagle > tails :
#     print(f'переверни {tails} решек')
# else:
#     print(f'переверни {eagle} орлов ')

#Задача 12: Петя и Катя – брат и сестра. Петя 
 #задумывает два натуральных числа X и Y (X,Y≤1000),
#а Катя должна их отгадать. Для этого Петя делает две подсказки.
# Он называет сумму этих чисел S и их произведение P. Помогите Кате отгадать задуманные Петей числа.

#sum_digit1 = int(input("Введите сумму чисел :"))
#product_digit1 = int(input("Введите произведение чисел :"))
#if sum_digit1 and product_digit1 <= 1000 :
#    for x in range(1, 1001):
#        for y in range(1, 1001):
#            if x + y == sum_digit1 :
#                print(f"Сумма{x,y}")
#            if x * y == product_digit1 :
#                print(f"Произведение{x,y}")


#Задача 14: Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числа N.
# number = int(input("Введите степень 2-ки : "))
# power = 0
# count =0
# while number > power :
#     power += 1
#     count = power
#     print(f'Все степени 2-ки :{count}')
# import random
# n = int(input('Введите число: '))
# my_list = [random.randint(0,30) for i in range(30) ]
# print(my_list)
# print(sum([1 for i in range(len(my_list)-1)if my_list[i] == n]))

# В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность.

# В случае с английским алфавитом очки распределяются так:

# A, E, I, O, U, L, N, S, T, R – 1 очко;
# D, G – 2 очка;
# B, C, M, P – 3 очка;
# F, H, V, W, Y – 4 очка;
# K – 5 очков;
# J, X – 8 очков;
# Q, Z – 10 очков.
# А русские буквы оцениваются так:

# А, В, Е, И, Н, О, Р, С, Т – 1 очко;
# Д, К, Л, М, П, У – 2 очка;
# Б, Г, Ё, Ь, Я – 3 очка;
# Й, Ы – 4 очка;
# Ж, З, Х, Ц, Ч – 5 очков;
# Ш, Э, Ю – 8 очков;
# Ф, Щ, Ъ – 10 очков.
# Напишите программу, которая вычисляет стоимость введенного пользователем слова k 
# и выводит его. Будем считать, что на вход подается только одно слово,
# которое содержит либо только английские, либо только русские буквы.
# values = {'A':1 , 'E':1 , 'I':1 , 'O':1 , 'U':1 , 'L':1 , 'N':1 , 'S':1 , 'T':1 , 'R':1 , 'D':2 , 
#               'G':2 , 'B':3 , 'C':3 , 'M':3 , 'P':3 , 'F':4 , 'H':4 , 'V':4 , 'W':4 , 'Y':4 , 'K':5 , 
#               'J':8 , 'X':8 ,'Q':10 , 'Z':10 ,}

# word = input('Введите слово :')
# lst_1 = list()
# cost = 0

# for i in word :
#     lst_1.append(i)
# print(lst_1)

# for i in word :
#     for k,v in values.items():
#         if  word[i] == k:
#             cost += v
# print(cost)


# Требуется найти в массиве list_1 самый близкий по величине элемент к заданному числу k 
# и вывести его.

# import random
# k = int(input('Введите число :'))
# list_1 = [random.randint(0,10)for i in range(5)]
# print(list_1) 
# nearest = 0
# diff = list_1[0]

# for i in len(list_1):
#     diff1 = k - list_1[1]
#     if diff > diff1:
#         nearest=diff1
# print(f"Ближайщее по величине {nearest}")


# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества.
# m — кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.
        
# Алгоритм:
# 2 приглашения к вводу на кол-во множеств.
# создать 3- пустых множества для n и m и (к-объединение двух множеств)
# создать 2 цикла для заполнение этих множеств
# написать приглашение к вводу значений этих множеств
# объединить 2 множества
# создать пустой список
# заполнить список множествами к
# проверить на совпадения и исключить повторения
# отсортировать в порядке возрастания

# n = int(input("Введите количество элементов первого набора: "))
# m = int(input("Введите количество элементов второго набора: "))

# set1 = set()
# set2 = set()
# set3 = set()
# list1 = list()

# print("Введите элементы первого набора:")
# for i in range(n):
#     element = int(input())
#     set1.add(element)
# print(set1)

# print("Введите элементы второго набора:")
# for i in range(m):
#     element = int(input())
#     set2.add(element)
# print(set2)

# set3 = set1.union(set2)
# print(set3)

# list1 = set3
# sort_list = sorted(list1)
# print(sort_list)

# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику.
# Она растёт на круглой грядке, причём кусты высажены только по окружности.
# Таким образом, у каждого куста есть ровно два соседних.
# Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью,
# поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
# Эта система состоит из управляющего модуля и нескольких собирающих модулей.
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом,
# собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод,
# которое может собрать за один заход собирающий модуль, 
# находясь перед некоторым кустом заданной во входном файле грядки.

# import random
# print('Введите количество кустов :')
# bushes = input()

# MAXIMUM = 7
# MINIMUM = 21
# max_berry = 0 

# berrys = [random.randint(MINIMUM,MAXIMUM)for i in range(bushes)]
# print(berrys)

# for i in range(bushes) :
#     sum_berrys = 


# Напишите функцию f, которая на вход принимает два числа a и b,
# и возводит число a в целую степень b с помощью рекурсии.
# n = int(input('Введите число :'))
# power_n =int(input('Введите степень :'))


# def pow(a,b) :
#     if b <= 0:
#         return 1
#     else:
#         return pow (a ** b)

# print(pow(n,power_n))

# Напишите рекурсивную функцию sum(a, b), возвращающую сумму двух целых неотрицательных чисел.
# Из всех арифметических операций допускаются только +1 и -1.
# Также нельзя использовать циклы.

# import random

# size_1 = int(input('Размер первого списка: '))
# size_2 = int(input('Размер второго списка: '))

# print(lst_1 := [random.randint(0,10) for _ in range(size_1)])
# print(lst_2 := [random.randint(0,10) for _ in range(size_2)])

# print([i for i in lst_1 if i not in lst_2])

# # for i in lst_1:
# #     if i not in lst_2:
# #         lst_3.append(i)

# def summ_divider(number):
#     summa = 0
#     for i in range(1, number // 2 + 1):
#         if number % i == 0:
#             summa += i
#     return summa


# friendly_dict = {num: summ_divider(num) for num in range(10000)}

# for num in range(10000):
#     friendly_num = friendly_dict.get(num)
#     if num == friendly_dict.get(friendly_num) and num < friendly_num:
#         print(num, friendly_num)


#     friendly_num = summ_divider(num)
#     if num == summ_divider(friendly_num) and num < friendly_num:
#         print(num, friendly_num)


# Задача 30:  Заполните массив элементами арифметической прогрессии. 
# Её первый элемент, разность и количество элементов нужно ввести с клавиатуры.
# Формула для получения n-го члена прогрессии: an = a1 + (n-1) * d.
# Каждое число вводится с новой строки.

# num = int(input('Введите число :'))
# num2 = int(input('Введите разность :'))
# num3 = int(input('Введите количество эл-в :'))

# print(progression :=[ num + (i) * num2 for i in range(num3+1)])

    

# Задача 32: Определить индексы элементов списка,
# значения которых принадлежат заданному диапазону 
# (т.е. не меньше заданного минимума 
#  и не больше заданного максимума)
# import random


# minimum_1 = int(input('Введите число :')) 
# maximum_2 = int(input('Введите число :'))
# list_2 = []

# print(list_1 := [random.randint(0,99) for _ in range(10)]) 

# for i in range(len(list_1)):
#      if list_1[i] >= minimum_1 and list_1[i] <= maximum_2:
#             list_2.append(i)
# print(list_2)
